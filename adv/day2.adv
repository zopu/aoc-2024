fn fill_from_with_skip(from [i64], to [i64], skip_idx i64):
  for i in 0..len(from):
    from_idx := i
    if i >= skip_idx { from_idx = i + 1 }
    to[i] = from[from_idx]
  return

// Returns index of first problem or -1 if none found
fn find_problem(report [i64]) i64:
  if report[1] == report[0] { return 1 }
  if report[1] > report[0]:
    // Ascending
    for i in 0..len(report) - 1:
      if report[i] >= report[i + 1] { return i + 1 }
      if report[i] + 3 < report[i + 1] { return i + 1 }
  if report[1] <= report[0]:
    // Descending
    for i in 0..len(report) - 1:
      if report[i] <= report[i + 1] { return i + 1 }
      if report[i] > report[i + 1] + 3 { return i + 1 }
  return -1

fn has_safe_removal(report [i64], tmp [i64]) bool:
  for i in 0..len(report):
    fill_from_with_skip(report, tmp, i)
    if find_problem(tmp[0:len(tmp) - 1]) == -1:
      return true
  return false

input := read_input("../input/real/day2_1.txt")
line_start := 0
p1_sum := 0
p2_sum := 0
for input_pos in 0..len(input):
  if input[input_pos] == 10:
    line := input[line_start:input_pos]
    line_start = input_pos + 1
    report := parse_ints(line)

    // TODO: Don't have another way of getting heap-allocated data yet!
    report_tmp := parse_ints(line)
    problem_idx := find_problem(report)
    if problem_idx == -1:
      p1_sum = p1_sum + 1
      p2_sum = p2_sum + 1
      continue
    if has_safe_removal(report, report_tmp):
      p2_sum = p2_sum + 1

println("Part 1: {p1_sum}")
println("Part 2: {p2_sum}")

