grid := read_input("../input/real/day4_1.txt")

// Returns index of first match or -1
fn find(s [u8], substr [u8]) i64:
  if len(s) < len(substr) { return -1 }
  for i in 0..len(s) - len(substr) - 1:
    match := true
    for j in 0..len(substr):
      if s[i + j] != substr[j]:
        match = false
        break
    if match == true { return i }
  return -1

fn count(s [u8], char u8) i64:
  sum := 0
  for i in 0..len(s):
    if s[i] == char { sum = sum + 1 }
  return sum


fn get(grid [u8], X i64, Y i64, x i64, y i64) u8:
  return grid[x + (X + 1) * y]

fn in_bounds(X i64, Y i64, x i64, y i64) bool:
  if x < 0 or x >= X or y < 0 or y >= Y { return false }
  return true

fn check(grid [u8], X i64, Y i64, x i64, y i64, char u8) bool:
  if x < 0 or x >= X or y < 0 or y >= Y { return false }
  return grid[x + (X + 1) * y] == char

dirs := [[1, 0], [-1, 0], [0, 1], [0, -1], [1, 1], [1, -1], [-1, 1], [-1, -1]]

X := find(grid, "\n")
// TODO: Char literal (10 is \n)
// or maybe allow coercion of a one-char string literal to a u8?
Y := count(grid, 10)
print("X: {X}. Y: {Y}\n")

sum := 0
xmas := "XMAS"
for i in 0..Y:
  for j in 0..X:
    for d in 0..len(dirs):
      match := true
      for ch in 0..len(xmas):
        if check(grid, X, Y, j + dirs[d][0] * ch, i + dirs[d][1] * ch, xmas[ch]) == false:
          match = false
      if match:
        sum = sum + 1

print("Sum: {sum}\n")
