input := read_input("../input/real/day3_1.txt")

// Returns index of first match or -1
fn find(s [u8], substr [u8]) i64:
  if len(s) < len(substr) { return -1 }
  for i in 0..len(s) - len(substr) - 1:
    match := true
    for j in 0..len(substr):
      if s[i + j] != substr[j]:
        match = false
        break
    if match == true { return i }
  return -1

fn is_all_ascii_digits(s [u8]) bool:
  for c in s:
    if c < 48 or c > 57 { return false }
  return true

fn mul_result(s[u8]) i64:
  if find(s, "mul(") != 0 { return -1 }

  comma_idx := find(s, ",")
  if comma_idx == -1 { return -1 }
  // TODO: Not operator
  if is_all_ascii_digits(s[4:comma_idx]) != true { return -1 }

  ints_first := parse_ints(s[0:comma_idx])
  if len(ints_first) != 1 { return -1 }

  close_idx := find(s[0:len(s)], ")")
  if close_idx == -1 or close_idx <= comma_idx { return -1 }
  if is_all_ascii_digits(s[comma_idx + 1:close_idx]) != true { return -1 }

  ints_second := parse_ints(s[comma_idx:close_idx])
  if len(ints_second) != 1 { return -1 }

  return ints_first[0] * ints_second[0]

sum := 0
for i in 0..len(input):
  next_mul := find(input[i:len(input)], "mul(")
  if next_mul == -1:
    break
  if next_mul >= 0:
    result := mul_result(input[i + next_mul:len(input)])
    if result != -1:
      sum = sum + result
    i = i + next_mul

println("Part 1: {sum}")

i := 0
sum = 0
doing := true
while i < len(input):
  if doing:
    next_mul := find(input[i:len(input)], "mul(")
    next_dont := find(input[i:len(input)], "don't()")
    if next_mul == -1 { break }
    // TODO: AND operator
    if next_dont < next_mul:
      if next_dont != -1:
        i = i + next_dont
        doing = false
        continue
    result := mul_result(input[i + next_mul:len(input)])
    if result != -1:
      sum = sum + result
    i = i + next_mul + 1
  if doing == false:
    next_do := find(input[i:len(input)], "do()")
    if next_do == -1 { break }
    doing = true
    i = i + next_do
println("Part 2: {sum}")
